{
    "docs": [
        {
            "location": "/", 
            "text": "autoconfig\n\n\n\n\n\n\nthis program is used to set up an arbitrary software project after its deployment.\nfrankly it is part of the deployment process and should take over after successfully\ncopying all project code to the appropriate location.\n\n\nthe currently supported software is \nvufind\n\n\ninstallation\n\n\nthis package is not part of the public npm-registry. its published to the private registry\nof the university library of leipzig. use this registry as follows:\n\n\nnpm i -g @ubleipzig/autoconfig\n\n\n\nit is recommended to install it as superuser, but it is advised to be run as non-root\nthough.\n\n\nrun\n\n\nthe program is invoked by\n\n\nautoconfig\n\n\n\nfor help see the commandline help i.e.\n\n\nautoconfig help", 
            "title": "autoconfig"
        }, 
        {
            "location": "/#autoconfig", 
            "text": "this program is used to set up an arbitrary software project after its deployment.\nfrankly it is part of the deployment process and should take over after successfully\ncopying all project code to the appropriate location.  the currently supported software is  vufind", 
            "title": "autoconfig"
        }, 
        {
            "location": "/#installation", 
            "text": "this package is not part of the public npm-registry. its published to the private registry\nof the university library of leipzig. use this registry as follows:  npm i -g @ubleipzig/autoconfig  it is recommended to install it as superuser, but it is advised to be run as non-root\nthough.", 
            "title": "installation"
        }, 
        {
            "location": "/#run", 
            "text": "the program is invoked by  autoconfig  for help see the commandline help i.e.  autoconfig help", 
            "title": "run"
        }, 
        {
            "location": "/vufind/", 
            "text": "autoconfig vufind\n\n\nSet up a vufind instance without having config files created or edited manually. \nautoconfig\n assumes that you have an initial configuration structure in the folder specified by \n--basedir\n, e.g.:\n\n\nmySite/\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 vufind\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 config.ini\n|       .\n\u2514\u2500\u2500 languages\n    \u251c\u2500\u2500 de.ini\n    \u251c\u2500\u2500 Ebsco\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 de.ini\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 en.ini\n    \u251c\u2500\u2500 en.ini\n    .\n\n\n\n\n\nautoconfig\n will then extend the folder \nmySite\n by a new folder specified by \n--instance\n that creates a new config-structure which inherits from the site's configs, e.g.:\n\n\nmySite/\n\u251c\u2500\u2500 live\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 vufind\n\u2502   \u2502       \u251c\u2500\u2500 config.ini\n\u2502   |       .\n\u2502   \u2514\u2500\u2500 languages\n\u2502       \u251c\u2500\u2500 de.ini\n\u2502       \u251c\u2500\u2500 Ebsco\n\u2502       \u2502\u00a0\u00a0 \u251c\u2500\u2500 de.ini\n\u2502       \u2502\u00a0\u00a0 \u2514\u2500\u2500 en.ini\n\u2502       \u251c\u2500\u2500 en.ini\n\u2502       .\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 vufind\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 config.ini\n|       .\n\u2514\u2500\u2500 languages\n    \u251c\u2500\u2500 de.ini\n    \u251c\u2500\u2500 Ebsco\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 de.ini\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 en.ini\n    \u251c\u2500\u2500 en.ini\n    .\n\n\n\n\n\nYou can customize the contents of the config-files by adding commandline-arguments like this:\n\n\n--vf.config_ini.Site.title=\nMy Awesome VuFind\n\n\n\n\n\nAlternatively one can add environment variables to add or modify configuration values like this:\n\n\nexport VF_config_ini__Site__title=\nMy Awesome VuFind\n\n\n\n\n\nBoth examples will add or overwrite the key \ntitle\n in section \nSite\n in config-file \nconfig.ini\n\n\ndeploy\n\n\nTo set up a vufind instance it has to follow some rules (although i tried to make it\nas flexible as possible)\n\n\nUsage\n\n\nautoconfig vufind deploy -s mySite -i live\n\n\n\nwill set up VuFind, assuming your installation lies under \n/usr/local/vufind\n and you have an configuration-folder \nmySite\nin there.\n\n\nOptions\n\n\n\n\n--site\n: The name of the site to set up. Required.\n\n\n--instance\n: The instance to deploy. Required, choose from \nalpha\n, \nstaging', \nlive*.\n\n\n--basedir\n: Will set the folder where the vufind-app is located. By default the\nfolder \n/usr/local/vufind/\n is used.\n\n\n--instance\n: Will set which instance is deployed. This is really just the name of the folder,\nwhere autoconfig saves all new config files in and which you have to set as\nVUFIND_LOCAL_DIR environment variable in apache2 so vufind will use it as config folder\n\n\n\n\n--db-backup-dir\n: The folder for database-backups.\n\n\n\n\n\n\n--configs\n: Specifies the folder where the configuration template is located which shall be\nset up. The filename has to be the name of the site prefixed by the extension \n.json\n.\nBy default the folder \n${HOME}/.autoconfig\n is used.\n\n\n\n\n--reuse-db\n: if present, an existing database will be reused by creating a new dbuser as\nconfigured and grant him all required rights to access the existing database.\nAny existing users having access to that database will be untouched.\nReusing an existing database imperatively depends on the right credentials for the database user.\nIf the database user created by \nautoconfig\n is unable to connect to the database \nautoconfig\n\nwill abort the process. Hint: \n--db-client\n. Defaults to \nfalse\n.\n\n\n--drop-db\n: If present, an existing database will be dropped, a user deleted and a brand new\ndatabase created. An appropriate user will be created as well.\nReusing an existing database imperatively depends on the right credentials for the database user.\nIf the database user created by \nautoconfig\n is unable to connect to the database \nautoconfig\n\nwill abort the process. Hint: \n--db-client\n. Defaults to \nfalse\n.\n\n\n--hash-id\n: If present, an unique md5-hash will be generated from basedir. this hash is used\nto identify the site by creating an autoconfig-json with this id and the site's database name\nand user. Defaults to \nfalse\n\n\n--restore-db\n: If present, \nautoconfig\n will look for a backup sql-file in the folder specified\nby \n--db-backup-dir\n after creating the database for the site. If a file for the site is found it\nis used to create a table structure, otherwise the vanilla sql-file is used. Defaults to \ntrue\n.\n\n\n--skip-config\n: If present, creating a configuration structure based on inheritance premisses\nis omitted. Defaults to \nfalse\n\n\n--skip-db\n: If present, creating a database is omitted. only the configuration structure is\ncreated and grunt is invoked. Defaults to \nfalse\n.\n\n\n--db-backup-dir\n: Specifies the folder where \nautoconfig\n looks for backup sql-files to restore\nat database creation of a site. Defaults to \n${HOME}/db_backup\n.\n\n\n--db-server\n: The specified value will be set as host that runs the db server. the value is\nignored, if there is a configuration in the sites \nautoconfig-json\n, see \n--configs\n. It is also\nignored, when \n--skip-config\n is specified and the \nconfig.ini\n entry for the database \nautoconfig\n\ncreates the database from is present.\n\n\n--db-client\n: The specified value will be set as host which the db server sees the db client as.\nTthis is not necessarily your vufind-client`s hostname but the ip - or hostname which the db-server\nresolves to that ip - which the client uses to connect to the db-server.\n\n\n--db-admin-user\n: The administrative user that performes all database actions. Defaults to \nroot\n.\n\n\n--db-admin-password\n: The password of the administrative user. Defaults to none.\n\n\n--import-sql-file\n: The relative path to \n--base-dir\n to the sql-file to import in case the\ndatabase is created. Defaults to \nmodule/VuFind/sql/mysql.sql\n.\n\n\n--update-settings\n: Creates the defaults file or updates if it exists. See \n--configs\n.\nDefaults to \nfalse\n\n\n\n\nBe aware that the option \n--db-server\n is only effective if there is no \nconfig.ini\n with an\nexisting database configuration. Otherwise the already configured database-credentials are used.\nYou could override them by specifying \n--vf.config_ini.Database.database\n, but this removes the\nability to create a database by hash (see \n--hash-id\n).\n\n\nBe aware that you \nalways\n have to specify \n--db-client\n if your database-server is not the same\nhost as the php-server. This option is used for creating and removing the database-user and\ntherefore not stored in any vufind configuration.\n\n\nBe aware that settings from parameters or environment variables take precedence over settings-files or \n.my.cnf\n.\n\n\nUndeploy\n\n\nRemoves the database of a site. \nDoes not remove its configuration.\n\n\nautoconfig vufind undeploy -s foo -i alpha\n\n\n\n\nThis creates a backup of the database of site foo\n\n\nExample\n\n\nlets say we want to set up the site \nfoo\n. The \nstaging\n folder of this site is named\nalike and is located in \n/var/lib/vufind/\n, the database-server and the ai-index url to use\nare the same for each site, the solr-url is different, so we specify that by adjusting\nthe site's configuration later.\n\n\nthe configurations do not exist, but we want to create them whilest processing.\nwe would to so as following:\n\n\nautoconfig vufind deploy \\\n  -i staging \\\n  -s foo\n  -b /var/lib/vufind/foo \\\n  --vf.config_ini.Site.url https://staging.vufind.example.com/foo \\\n  --db-server mysql.example.com \\\n  --db-client staging.vufind.example.com\n\n\n\n\nautoconfig\n now looks for all configuration files within \n/var/lib/vufind/foo/foo/config/vufind/\n\n and and language files within \n/var/lib/vufind/foo/foo/languages/\n.\n\n\nConfig files which ends to \n.ini\n are considered do be inheritable and therefore \nautoconfig\n\n creates new files in \n/var/lib/vufind/foo/foo/staging/config/vufind/\n with the same name\n and a parent-config setting as vufind supports it, which inherits the related config-file.\n\n\nThe next step is to create a database according to the specified credentials. since there\n are none specified (which is for now only possible by providing a configuration template,\n see \nconfigs\n) \nautoconfig\n creates a dbuser \nvufind_foo\n, a database \nvufind_foo\n and\n a random password. To be able to do so the user that runs \nautoconfig\n needs a \n.my.cnf\n in\n its home folder that specifys the sufficient credentials to log into the server, create\n databases and users.\n\n\nnow \nautoconfig\n writes the autogenerated database credentials, the specified ai-url and\n some default values in the \nstaging\n config files.\n\n\nbecause there is no configuration template for this site yet \nautoconfig\n creates one and\n writes all configuration values as json-object. the file looks like that\n\n\n{\n  \nDAIA.ini\n: {},\n  \nFincILS.ini\n: {},\n  \nHierarchyDefault.ini\n: {},\n  \nSolrAI.ini\n: {},\n  \nconfig.ini\n: {\n    \nDatabase\n: {\n      \ndatabase\n: \nmysql://vufind_foo:U57jeRyw8mT7Vl9v@mysql.example.com/vufind_foo\n\n    },\n    \nIndex\n: {\n      \nurl\n: \nhttp://172.18.113.250:8080/solr\n\n    },\n    \nAuthentication\n: {\n      \nils_encryption_key\n: \ngef36739fc553b9c41e802g4c440eb0bba1cd326\n\n    },\n    \nSite\n: {\n      \nurl\n: \nhttps://staging.vufind.example.com/foo\n\n    }\n  },\n  \nfacets.ini\n: {},\n  \nsearches.ini\n: {\n    \nIndexShards\n: {\n      \nai\n: \nai.vufind.example.com/biblio\n\n    },\n    \nShardPreferences\n: {\n      \nshowCheckboxes\n: true\n    }\n  }\n}\n\n\n\n\nyou can also see some configuration which is not defined by parameters at commandline.\nthese are default values which appear to be required or useful.\n\n\nto change the configuration of the site simply edit the template and do another\n\n\nautoconfig vufind deploy \\\n  -i staging \\\n  -s foo \\\n  -b /var/lib/vufind/foo \\\n  --db-client staging.vufind.example.com \\\n  foo\n\n\n\n\nsince all configuration is now provided by the site template we do not need to provide\nconfiguration values by commandline parameters.\n\n\nBe aware, that this is not the case for \n--db-client\n. If your VuFind is not on the same\nhost as the mysql-server you have to specify the mysql-client so that the mysql-user is\ncreated apropriately. Otherwise VuFind will not be able to connect to the database-server.\n\n\nTodo\n\n\n\n\nsupport for yaml format\n\n\nmake it more generic usable", 
            "title": "autoconfig vufind"
        }, 
        {
            "location": "/vufind/#autoconfig-vufind", 
            "text": "Set up a vufind instance without having config files created or edited manually.  autoconfig  assumes that you have an initial configuration structure in the folder specified by  --basedir , e.g.:  mySite/\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 vufind\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 config.ini\n|       .\n\u2514\u2500\u2500 languages\n    \u251c\u2500\u2500 de.ini\n    \u251c\u2500\u2500 Ebsco\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 de.ini\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 en.ini\n    \u251c\u2500\u2500 en.ini\n    .  autoconfig  will then extend the folder  mySite  by a new folder specified by  --instance  that creates a new config-structure which inherits from the site's configs, e.g.:  mySite/\n\u251c\u2500\u2500 live\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 vufind\n\u2502   \u2502       \u251c\u2500\u2500 config.ini\n\u2502   |       .\n\u2502   \u2514\u2500\u2500 languages\n\u2502       \u251c\u2500\u2500 de.ini\n\u2502       \u251c\u2500\u2500 Ebsco\n\u2502       \u2502\u00a0\u00a0 \u251c\u2500\u2500 de.ini\n\u2502       \u2502\u00a0\u00a0 \u2514\u2500\u2500 en.ini\n\u2502       \u251c\u2500\u2500 en.ini\n\u2502       .\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 vufind\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 config.ini\n|       .\n\u2514\u2500\u2500 languages\n    \u251c\u2500\u2500 de.ini\n    \u251c\u2500\u2500 Ebsco\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 de.ini\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 en.ini\n    \u251c\u2500\u2500 en.ini\n    .  You can customize the contents of the config-files by adding commandline-arguments like this:  --vf.config_ini.Site.title= My Awesome VuFind   Alternatively one can add environment variables to add or modify configuration values like this:  export VF_config_ini__Site__title= My Awesome VuFind   Both examples will add or overwrite the key  title  in section  Site  in config-file  config.ini", 
            "title": "autoconfig vufind"
        }, 
        {
            "location": "/vufind/#deploy", 
            "text": "To set up a vufind instance it has to follow some rules (although i tried to make it\nas flexible as possible)", 
            "title": "deploy"
        }, 
        {
            "location": "/vufind/#usage", 
            "text": "autoconfig vufind deploy -s mySite -i live  will set up VuFind, assuming your installation lies under  /usr/local/vufind  and you have an configuration-folder  mySite in there.", 
            "title": "Usage"
        }, 
        {
            "location": "/vufind/#options", 
            "text": "--site : The name of the site to set up. Required.  --instance : The instance to deploy. Required, choose from  alpha ,  staging',  live*.  --basedir : Will set the folder where the vufind-app is located. By default the\nfolder  /usr/local/vufind/  is used.  --instance : Will set which instance is deployed. This is really just the name of the folder,\nwhere autoconfig saves all new config files in and which you have to set as\nVUFIND_LOCAL_DIR environment variable in apache2 so vufind will use it as config folder   --db-backup-dir : The folder for database-backups.    --configs : Specifies the folder where the configuration template is located which shall be\nset up. The filename has to be the name of the site prefixed by the extension  .json .\nBy default the folder  ${HOME}/.autoconfig  is used.   --reuse-db : if present, an existing database will be reused by creating a new dbuser as\nconfigured and grant him all required rights to access the existing database.\nAny existing users having access to that database will be untouched.\nReusing an existing database imperatively depends on the right credentials for the database user.\nIf the database user created by  autoconfig  is unable to connect to the database  autoconfig \nwill abort the process. Hint:  --db-client . Defaults to  false .  --drop-db : If present, an existing database will be dropped, a user deleted and a brand new\ndatabase created. An appropriate user will be created as well.\nReusing an existing database imperatively depends on the right credentials for the database user.\nIf the database user created by  autoconfig  is unable to connect to the database  autoconfig \nwill abort the process. Hint:  --db-client . Defaults to  false .  --hash-id : If present, an unique md5-hash will be generated from basedir. this hash is used\nto identify the site by creating an autoconfig-json with this id and the site's database name\nand user. Defaults to  false  --restore-db : If present,  autoconfig  will look for a backup sql-file in the folder specified\nby  --db-backup-dir  after creating the database for the site. If a file for the site is found it\nis used to create a table structure, otherwise the vanilla sql-file is used. Defaults to  true .  --skip-config : If present, creating a configuration structure based on inheritance premisses\nis omitted. Defaults to  false  --skip-db : If present, creating a database is omitted. only the configuration structure is\ncreated and grunt is invoked. Defaults to  false .  --db-backup-dir : Specifies the folder where  autoconfig  looks for backup sql-files to restore\nat database creation of a site. Defaults to  ${HOME}/db_backup .  --db-server : The specified value will be set as host that runs the db server. the value is\nignored, if there is a configuration in the sites  autoconfig-json , see  --configs . It is also\nignored, when  --skip-config  is specified and the  config.ini  entry for the database  autoconfig \ncreates the database from is present.  --db-client : The specified value will be set as host which the db server sees the db client as.\nTthis is not necessarily your vufind-client`s hostname but the ip - or hostname which the db-server\nresolves to that ip - which the client uses to connect to the db-server.  --db-admin-user : The administrative user that performes all database actions. Defaults to  root .  --db-admin-password : The password of the administrative user. Defaults to none.  --import-sql-file : The relative path to  --base-dir  to the sql-file to import in case the\ndatabase is created. Defaults to  module/VuFind/sql/mysql.sql .  --update-settings : Creates the defaults file or updates if it exists. See  --configs .\nDefaults to  false   Be aware that the option  --db-server  is only effective if there is no  config.ini  with an\nexisting database configuration. Otherwise the already configured database-credentials are used.\nYou could override them by specifying  --vf.config_ini.Database.database , but this removes the\nability to create a database by hash (see  --hash-id ).  Be aware that you  always  have to specify  --db-client  if your database-server is not the same\nhost as the php-server. This option is used for creating and removing the database-user and\ntherefore not stored in any vufind configuration.  Be aware that settings from parameters or environment variables take precedence over settings-files or  .my.cnf .", 
            "title": "Options"
        }, 
        {
            "location": "/vufind/#undeploy", 
            "text": "Removes the database of a site.  Does not remove its configuration.  autoconfig vufind undeploy -s foo -i alpha  This creates a backup of the database of site foo", 
            "title": "Undeploy"
        }, 
        {
            "location": "/vufind/#example", 
            "text": "lets say we want to set up the site  foo . The  staging  folder of this site is named\nalike and is located in  /var/lib/vufind/ , the database-server and the ai-index url to use\nare the same for each site, the solr-url is different, so we specify that by adjusting\nthe site's configuration later.  the configurations do not exist, but we want to create them whilest processing.\nwe would to so as following:  autoconfig vufind deploy \\\n  -i staging \\\n  -s foo\n  -b /var/lib/vufind/foo \\\n  --vf.config_ini.Site.url https://staging.vufind.example.com/foo \\\n  --db-server mysql.example.com \\\n  --db-client staging.vufind.example.com  autoconfig  now looks for all configuration files within  /var/lib/vufind/foo/foo/config/vufind/ \n and and language files within  /var/lib/vufind/foo/foo/languages/ .  Config files which ends to  .ini  are considered do be inheritable and therefore  autoconfig \n creates new files in  /var/lib/vufind/foo/foo/staging/config/vufind/  with the same name\n and a parent-config setting as vufind supports it, which inherits the related config-file.  The next step is to create a database according to the specified credentials. since there\n are none specified (which is for now only possible by providing a configuration template,\n see  configs )  autoconfig  creates a dbuser  vufind_foo , a database  vufind_foo  and\n a random password. To be able to do so the user that runs  autoconfig  needs a  .my.cnf  in\n its home folder that specifys the sufficient credentials to log into the server, create\n databases and users.  now  autoconfig  writes the autogenerated database credentials, the specified ai-url and\n some default values in the  staging  config files.  because there is no configuration template for this site yet  autoconfig  creates one and\n writes all configuration values as json-object. the file looks like that  {\n   DAIA.ini : {},\n   FincILS.ini : {},\n   HierarchyDefault.ini : {},\n   SolrAI.ini : {},\n   config.ini : {\n     Database : {\n       database :  mysql://vufind_foo:U57jeRyw8mT7Vl9v@mysql.example.com/vufind_foo \n    },\n     Index : {\n       url :  http://172.18.113.250:8080/solr \n    },\n     Authentication : {\n       ils_encryption_key :  gef36739fc553b9c41e802g4c440eb0bba1cd326 \n    },\n     Site : {\n       url :  https://staging.vufind.example.com/foo \n    }\n  },\n   facets.ini : {},\n   searches.ini : {\n     IndexShards : {\n       ai :  ai.vufind.example.com/biblio \n    },\n     ShardPreferences : {\n       showCheckboxes : true\n    }\n  }\n}  you can also see some configuration which is not defined by parameters at commandline.\nthese are default values which appear to be required or useful.  to change the configuration of the site simply edit the template and do another  autoconfig vufind deploy \\\n  -i staging \\\n  -s foo \\\n  -b /var/lib/vufind/foo \\\n  --db-client staging.vufind.example.com \\\n  foo  since all configuration is now provided by the site template we do not need to provide\nconfiguration values by commandline parameters.  Be aware, that this is not the case for  --db-client . If your VuFind is not on the same\nhost as the mysql-server you have to specify the mysql-client so that the mysql-user is\ncreated apropriately. Otherwise VuFind will not be able to connect to the database-server.", 
            "title": "Example"
        }, 
        {
            "location": "/vufind/#todo", 
            "text": "support for yaml format  make it more generic usable", 
            "title": "Todo"
        }
    ]
}