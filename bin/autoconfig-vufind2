#!/usr/bin/env node
'use strict';

var program = require('commander')
	, Q = require('q')
	, _ = require('underscore')
	, fs = require('fs')
	, path = require('path')
	, rimraf = require('rimraf')
	, mkdirp = require('mkdirp')
	, configtools = require('../lib/vufind2/configtools');
;

program
	.usage('[options] <site ...>')
	.option('-b, --basedir [value]', 'where the configuration is saved', '/usr/local/vufind2/')
	.option('-i, --instance <value>', 'the instance to set up', /^(alpha|staging|live)$/i)
	.option('-c, --configs [value]', 'the folder with default overrides. they must follow the naming convention isil.json', path.join(process.env.HOME, '.autoconfig/'))
	.option('-w, --write', 'writes the autogenerated values to defaults <site>.json')
	.option('-f, --force', 'forces rewriting of database user according defaults, despite of autogenerated or overridden')
	.option('-d, --drop', 'forces dropping of existing database')
	.option('--db-server [value]', 'the host that runs the db server', 'localhost')
	.option('--db-client [value]', 'the host which the db server sees the db client as', 'localhost')
	.option('--solr-url [value]', 'the url to the solr', 'http://172.18.113.250:8080/solr')
	.option('--ai-url [value]', 'the url to the article-index', 'ai.ub.uni-leipzig.de/solr/biblio')
	.option('-u, --url [value]', 'the url of this site', 'https://staging.finc.info/vufind2/')
	.parse(process.argv);

if (!program.instance) {
	console.error('please specify the instance to set up');
	process.exit(1);
}

if (!program.args) {
	console.error('please specify at least one site to set up');
}

var fsOptions = {
	encoding: 'utf8',
	mode: '0644'
}

var promise = Q.all(_.map(program.args, function (site) {
	return Q.all([
		fetchDefaults(site),
		findParentConfigs(site)
	]).then(function (result) {
		return createConfigs(site, result[0], result[1]);
	}).catch(function (err) {
		console.error('could not configure site ' + site);
		console.error(err);
	});
})).then(function (result) {
	console.log('processed ' + result.length + ' sites');
});


/**
 * fetches defaults
 *
 * @param site name
 */
function fetchDefaults(site) {
	var deferred = Q.defer();
	var defaultsPath = path.join(program.configs, site + '.json');
	console.log('parsing defaults from %s', defaultsPath);
	fs.readFile(defaultsPath, _.extend(fsOptions, {flag: 'r'}), function (err, data) {
		if (err) {
			console.error(err);
			program.write = true
			deferred.resolve({});
		} else {
			deferred.resolve(JSON.parse(data));
		}
	});
	return deferred.promise;
}

function updateDefaults(site, defaults) {
	var deferred = Q.defer();
	var defaultsPath = path.join(program.configs, site + '.json');

	if (!program.write) {
		return deferred.resolve();
	}

	console.log('updating defaults to %s', defaultsPath);

	fs.mkdir(program.configs, '0700', function(err) {
		if (err && err.code !== 'EEXIST') deferred.reject(err);
		var data = JSON.stringify(defaults, null, "  ");

		fs.writeFile(defaultsPath, data, _.extend(fsOptions, {flag: 'w+'}), function (err) {
			if (err) return deferred.reject(err);
			deferred.resolve(data);
		});
	});

	return deferred.promise;
}

/**
 * finds the parent configs which have to be inherited
 *
 * @param site
 * @returns {promise|*|Q.promise}
 */
function findParentConfigs(site) {
	var deferred = Q.defer();
	var configPath = path.join(program.basedir, site, site, 'config', 'vufind');

	console.log('finding parent configs in %s', configPath);

	fs.readdir(configPath, function (err, data) {
		if (err) {
			deferred.reject(err);
		} else {
			deferred.resolve(_.map(data, function(file) {
				return path.join(configPath, file);
			}));
		}
	});

	return deferred.promise;
}

/**
 * creates a configs based on the config-name's implementation and default configuration
 *
 * @param site
 * @param defaults
 * @param configs
 * @returns {promise|*|Q.promise}
 */
function createConfigs(site, defaults, configs) {
	return Q.fcall(function() {
		var instanceConfigPath = (program.instance === 'live')
			? path.join(program.basedir, site, program.instance, 'config/vufind')
			: path.join(program.basedir, site, site, program.instance, 'config/vufind');

		console.log('creating instance config dir %s', instanceConfigPath);
		rimraf.sync(instanceConfigPath);
		mkdirp.sync(instanceConfigPath);
		return Q.all(_.map(configs, function (filePath) {
			var item = path.basename(filePath);
			var options = {
				baseDir: program.basedir,
				instance: program.instance,
				site: site,
				inheritedConfig: filePath,
				destConfig: path.join(instanceConfigPath, item),
				configName: item,
				ext: path.extname(item)
			};
			return configtools.create(options).then(function (options) {
				console.log('including %s', options.configName);
				if (!defaults[options.configName]) defaults[options.configName] = {};
				try {
					var c = require('../lib/vufind2/' + options.configName);
					return c(options, defaults[options.configName]);
				} catch (err) {
					var deferred = Q.defer();
					deferred.resolve(defaults[options.configName]);
					return deferred.promise;
				}
			}).then(function(config) {
				return configtools.append(config, options.destConfig);
			})
		})).then(function() {
			return updateDefaults(site, defaults);
		});
	});
}
