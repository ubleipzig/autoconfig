#!/usr/bin/env node

'use strict';

var program = require('commander'),
	Q = require('q'),
	_ = require('underscore'),
	path = require('path'),
	configtools = require('../lib/vufind/configtools'),
	grunttools = require('../lib/vufind/grunttools'),
	composertools = require('../lib/vufind/composertools');

program
	.usage('[options] <site ...>')
	.option('-b, --basedir [value]', 'where the configuration is saved', '/usr/local/vufind/')
	.option('-i, --instance <value>', 'the instance to set up', /^(alpha|staging|live)$/i)
	.option('-c, --configs [value]', 'the folder with default overrides. they must follow the naming convention isil.json', path.join(process.env.HOME, '.autoconfig/'))
	.option('-w, --write', 'writes the autogenerated values to defaults <site>.json')
	.option('-f, --force', 'forces rewriting of database user according defaults, despite of autogenerated or overridden')
	.option('-d, --drop', 'forces dropping of existing database')
	.option('--skip-config', 'skip generating config')
	.option('--skip-grunt', 'skip performing grunt processing')
	.option('--db-server [value]', 'the host that runs the db server', 'localhost')
	.option('--db-client [value]', 'the host which the db server sees the db client as', 'localhost')
	.option('--solr-url [value]', 'the url to the solr', 'http://172.18.113.250:8080/solr')
	.option('-u, --url [value]', 'the url of this site', 'https://staging.finc.info/vufind/')
	.parse(process.argv);

if (!program.instance) {
	console.error('please specify the instance to set up');
	process.exit(1);
}

if (!program.args || program.args.length > 1) {
	console.error('please specify exactly one site to set up');
}

const site = program.args[0];

return Q.spread([
	configtools.fetchDefaults(site),
	configtools.findParentConfigs(site),
	configtools.findParentLanguages(site),
	grunttools.foundation(site)
], function (defaults, configs, languages) {
	return configtools.createConfigs(site, defaults, configs, languages);
}).then(function (result) {
	return configtools.updateDefaults(site, result);
}).then(function (result) {
	return composertools.composer(site, result);
}).catch(function (err) {
	console.error('could not configure site ' + site);
	console.error(err);
});
})).then(function (result) {
	console.log('processed ' + result.length + ' sites');
});