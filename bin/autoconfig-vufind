#!/usr/bin/env node

'use strict';

var program = require('commander'),
	Q = require('q'),
	path = require('path'),
	crypto = require('crypto');

program
	.usage('[options] <site>')
	.option('-b, --basedir [value]', 'where the configuration is saved', '/usr/local/vufind/')
	.option('-i, --instance <value>', 'the instance to set up', /^(alpha|staging|live)$/i)
	.option('-c, --configs [value]', 'the folder with instance default settings.', path.join(process.env.HOME, '.autoconfig'))
	.option('-f, --reuse-db', 'reuses an existing database by recreating credentials according to defaults', false)
	.option('-d, --drop-db', 'drops an existing database', false)
	.option('--hash-id', 'creates a unique deploy-id from basedir (used for db name/user and config-json', false)
	.option('--restore-db', 'restores db, if backup exists', true)
	.option('--skip-config', 'skip generating config')
	.option('--skip-db', 'skip creating/importing database')
	.option('--db-backup-dir [value]', 'backup-folder for databases', path.join(process.env.HOME, 'db_backup'))
	.option('--undeploy', 'removes db and creates a backup or the current')
	.option('--db-server [value]', 'the host that runs the db server', 'localhost')
	.option('--db-client [value]', 'the host which the db server sees the db client as', 'localhost')
	.option('--solr-url [value]', 'the url to the solr')
	.option('-u, --url [value]', 'the url of this site')
	.option('--update-defaults', 'updates the default instance settings', false)
	.parse(process.argv);

if (!program.instance) {
	console.error('please specify the instance to set up');
	process.exit(1);
}

if (!program.args || program.args.length > 1) {
	console.error('please specify exactly one site to set up');
	process.exit(2);
}

var site = program.args[0];

var hash = crypto.createHash('sha').update(program.basedir).digest('hex');

if (program.hashId) {
	var hashId = hash.substr(0,4) + hash.substr(10, 4) + hash.substr(26, 4) + hash.substr(36, 4);
} else if (('vufind_' + site).length > 16) {
	var dbName = hash.substr(0,4) + hash.substr(10, 4) + hash.substr(26, 4) + hash.substr(36, 4);
} else {
	var dbName = 'vufind_' + site;
}

var configtools = require('../lib/vufind/configtools')({
	basedir: program.basedir,
	site: site,
	instance: program.instance,
	configs: program.configs,
	deployId: hashId || site,
	dbServer: program.dbServer,
	dbName: hashId || dbName,
	solrUrl: program.solrUrl,
	url: program.url
});

var dbtools = require('../lib/vufind/dbtools')({
	basedir: program.basedir,
	backupDir: program.dbBackupDir,
	restoreDb: program.restoreDb,
	dbClient: program.dbClient,
	dbServer: program.dbServer,
	dbName: hashId || dbName,
	reuseDb: program.reuseDb,
	dropDb: program.dropDb,
	vanillaSqlFile: path.join(program.basedir, 'module/VuFind/sql/mysql.sql'),
	instanceConfigIni: path.join(program.basedir, site, program.instance, 'config', 'vufind', 'config.ini')
});

var grunttools = require('../lib/grunttools')({
	basedir: program.basedir
});

var composertools = require('../lib/composertools')({
	basedir: program.basedir
});

var skipConfig = program.skipConfig ? Q() : undefined;
var skipDb = program.skipDb ? Q() : undefined;
var skipUpdateDefaults = program.updateDefaults ? undefined : Q();

if (program.undeploy) {
	undeploy();
} else {
	deploy();
}

function deploy() {
	Q.all([
		skipConfig || configtools.parse(program).then(() => {
			return configtools.createConfigs().then(function (configs) {
				return skipUpdateDefaults || configtools.updateDefaults(configs);
			});
		}).then(function () {
			return skipDb || dbtools.createDb();
		}),
		(function () {
			var deferred = Q.defer();
			grunttools.grunt().then(deferred.resolve).catch(function (err) {
				console.log('something went wrong while doing `grunt`-related job, continuing nevertheless');
				console.error(err);
				deferred.resolve();
			});
			return deferred.promise;
		})(),
		composertools.composer()
	], function () {
		console.log('processed site ' + site);
	}).catch(function (err) {
		console.error('could not configure site ' + site);
		console.error(err);
	});
}

function undeploy() {
	dbtools.removeDb().then(function (backupFile) {
		console.log(`site removed successfully. Database backup saved to ${backupFile}`);
	}).catch(function () {
		console.log('no database was removed');
	});
}
